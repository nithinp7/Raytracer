#version 430

#define MAX_TEXTURES 3
#define MAX_MATERIALS 5

#define MAX_SCENE_BOUNDS 1000.0

#define MAX_TRIS 5
#define MAX_SPHERES 40
#define MAX_PLANES 1

#define MAX_LIGHTS 4

layout(local_size_x = 1, local_size_y = 1) in;
layout(binding = 0, rgba32f) uniform image2D img_output;

struct material {
    vec4 difCol;
    vec4 specCol;
    vec4 reflCol;
    vec4 transpCol;

    float shininess;
    float refrIndx;
    
    int texIndx;
};

struct sphere {
    vec4 center;
    float radius;
    int matIndx;
};

struct tri {
    vec4 a;
    vec4 ab;
    vec4 ac;
    vec4 n;

    //texture info
    vec2 tex0;
    vec2 tex1;
    vec2 tex2;

    int matIndx;
};

struct plane {
    vec4 p;
    vec4 n;
    vec4 u;
    vec4 v;

    int matIndx;
};

layout(std140) uniform Unifs {
    tri tris [MAX_TRIS];
    sphere spheres [MAX_SPHERES];
    plane planes [MAX_PLANES];

    vec4 lights [MAX_LIGHTS];

    material maters [MAX_MATERIALS];
    
    vec4 ambLight;
    vec4 bgCol;

    vec4 eye;
    vec4 ray00;
    vec4 ray01;
    vec4 ray10;
    vec4 ray11;

    int num_tris;
    int num_spheres;
    int num_planes;
    int num_lights;

    float time;

    //float _pad[3];
};

void main() {
  // base pixel colour for image
  vec4 color = vec4(normalize(eye.xyz), 1);
  // get index in global work group i.e x,y position
  ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
  
  //
  // interesting stuff happens here later
  //
  
  // output to a specific pixel in the image
  imageStore(img_output, pixel_coords, color);
}